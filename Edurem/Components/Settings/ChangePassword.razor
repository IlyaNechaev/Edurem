@namespace Edurem.Components
@inject Edurem.Services.IUserService UserService;
@inject IMatToaster Toaster;

<a type="button" style="font-size: 19px" href="#" data-toggle="modal" data-target="#passwordModal">
    Изменить пароль
</a>

<!-- Modal -->
<div class="modal fade" id="passwordModal" tabindex="-1" role="dialog" aria-labelledby="passwordModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Изменить пароль</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="e => Reload()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row justify-content-center">
                    <div class="col-8">
                        <div class="row">
                            <input class="form-control @(ValidationResults?.ContainsKey(nameof(OldPassword)) ?? false ? "border-danger" : "")" type="password" placeholder="Старый пароль" @bind-value="OldPassword" />
                        </div>
                        @if (ValidationResults.ContainsKey(nameof(OldPassword)))
                        {
                            <span class="text-danger" style="font-weight: bold">@ValidationResults[nameof(OldPassword)]</span>
                        }
                        <div class="dropdown-divider"></div>
                        <div class="row">
                            <input class="form-control @(ValidationResults?.ContainsKey(nameof(NewPassword)) ?? false ? "border-danger" : "")" type="password" placeholder="Новый пароль" @bind-value="NewPassword" />
                        </div>
                        @if (ValidationResults.ContainsKey(nameof(NewPassword)))
                        {
                            <span class="text-danger" style="font-weight: bold">@ValidationResults[nameof(NewPassword)]</span>
                        }
                        <div class="row mt-2">
                            <input class="form-control @(ValidationResults?.ContainsKey(nameof(NewPasswordAgain)) ?? false ? "border-danger" : "")" type="password" placeholder="Новый пароль еще раз" @bind-value="NewPasswordAgain" />
                        </div>
                        @if (ValidationResults.ContainsKey(nameof(NewPasswordAgain)))
                        {
                            <span class="text-danger" style="font-weight: bold">@ValidationResults[nameof(NewPasswordAgain)]</span>
                        }
                    </div>
                </div>                
            </div>
            <div class="modal-footer">
                <button type="button" style="font-size: 18px" class="btn btn-primary" disabled="@IsChangingPerforming" @onclick="e => Change()">Изменить</button>
            </div>
        </div>
    </div>
</div>
<MatToastContainer />

@code {

    [Parameter]
    public int UserId { get; set; }

    string OldPassword { get; set; }
    string NewPassword { get; set; }
    string NewPasswordAgain { get; set; }

    bool IsChangingPerforming { get; set; }

    Dictionary<string, string> ValidationResults { get; set; }

    protected override void OnInitialized()
    {
        OldPassword = string.Empty;
        NewPassword = string.Empty;
        NewPasswordAgain = string.Empty;

        IsChangingPerforming = false;

        ValidationResults = new();
    }

    void Reload()
    {
        OldPassword = string.Empty;
        NewPassword = string.Empty;
        NewPasswordAgain = string.Empty;

        IsChangingPerforming = false;

        ValidationResults = new();
    }

    async Task Change()
    {
        IsChangingPerforming = true;
        if (!await ValidateModel())
        {
            IsChangingPerforming = false;
            return;
        }

        await UserService.ChangePassword(UserId, NewPassword);

        Show(MatToastType.Success, "Успешно!", "Пароль изменен");
        Reload();
    }

    async Task<bool> ValidateModel()
    {
        ValidationResults = new();

        if (string.IsNullOrEmpty(OldPassword))
        {
            ValidationResults.Add(nameof(OldPassword), "Введите пароль");
        }
        else if (!await UserService.IsPasswordValid(UserId, OldPassword))
        {
            ValidationResults.Add(nameof(OldPassword), "Неверный пароль");
        }
        if (!NewPassword.Equals(NewPasswordAgain))
        {
            ValidationResults.Add(nameof(NewPasswordAgain), "Пароли не совпадают");
        }
        if (string.IsNullOrEmpty(NewPassword))
        {
            ValidationResults.Add(nameof(NewPassword), "Введите новый пароль");
        }

        return ValidationResults.Count == 0;
    }

    void Show(MatToastType type, string title, string message, string icon = "")
    {
        Toaster.Add(message, type, title, icon);
    }
}
