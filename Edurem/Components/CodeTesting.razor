@using System.IO;
@using System.Text;
@inject Edurem.Services.ICodeTestService TestService;
@inject Edurem.Services.IFileService FileService;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment AppEnvironment;
@inject IJSRuntime JsRuntime;
@inject Edurem.Services.IMarkdownService MarkdownService;

<div class="row">
    <div class="col-12">
        <div class="row justify-content-center mt-5">
            <div class="col-4 card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col-8 text-left">
                            <p style="font-size: 20px" class="mb-0"><b>Ответы</b></p>
                        </div>
                        <div class="col-4 justify-content-end text-right">
                            @if (IsTestPerforming)
                            {
                                <i class="far fa-file" style="font-size: 21px; color: grey"></i>
                            }
                            else
                            {
                                <a href="#" @onclick:preventDefault @onclick="e => CreateNewFile()">
                                    <i class="far fa-file" style="font-size: 21px; color: green"></i>
                                </a>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row justify-content-center mt-4">
                        <ul class="col-12">
                            @foreach (var file in Files.FilesToUpload)
                            {
                                <li class="row justify-content-center">
                                    <div class="col-4">
                                        <p style="font-size: 18px">@file.Name</p>
                                    </div>
                                    <div class="col-1">
                                    </div>
                                    @if (IsTestPerforming)
                                    {
                                        <div class="col-1">
                                            <i class="fas fa-pencil-alt" style="color: grey"></i>
                                        </div>
                                        <div class="col-1">
                                            <i class="fas fa-times" style="color: grey"></i>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-1">
                                            <a href="" @onclick:preventDefault="true"
                                               @onclick="async e =>
                                         {
                                             await OpenFile(file);
                                         }">
                                                <i class="fas fa-pencil-alt"></i>
                                            </a>
                                        </div>
                                        <div class="col-1">
                                            <a href="" @onclick:preventDefault="true"
                                               @onclick="e =>
                                         {
                                             DeleteFile(file);
                                         }">
                                                <i class="fas fa-times" style="color: red"></i>
                                            </a>
                                        </div>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="row justify-content-center">
                        <ul class="col-12">
                            @foreach (var file in Files.FilesToPrepare)
                            {
                                <li class="row justify-content-center">
                                    <div class="col-4">
                                        @file.File.Name
                                    </div>
                                    <div class="col-3">
                                        <MatThemeProvider Theme="theme">
                                            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
                                        </MatThemeProvider>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-10">
                            <MatFileUpload Style="16px" Label="Добавить файл" Class="border h-25" OnChange="files => FilesReady(files)" AllowMultiple="true">
                            </MatFileUpload>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-8 rounded border align-content-center">
                <div class="row" hidden="@(!fileToEdit?.IsOpened ?? true)">
                    <div class="col-12">
                        <div class="row">
                            <input class="form-control" type="text" @bind-value="fileToEdit.Name" />
                        </div>
                        <div class="row mt-1 border-bottom">
                            <div class="col-1">
                                @if (fileToEdit?.IsChanged ?? false || !IsTestPerforming)
                                {
                                    <a href="#" @onclick:preventDefault @onclick="e => SaveFile()">
                                        <i class="far fa-save" style="font-size: 21px"></i>
                                    </a>
                                }
                                else
                                {
                                    <i class="far fa-save" style="font-size: 21px; color: grey"></i>
                                }
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-12 h-100">
                                <CodeMirror @ref="CodeEditor"></CodeMirror>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-start m-2">
            <button class="btn btn-primary" style="font-size: 18px" disabled="@IsTestPerforming"
                    @onclick="async e =>
                              {
                                  if (IsFormValid())
                                  {
                                      IsTestPerforming = true;
                                      await Test();
                                      IsTestPerforming = false;
                                  }
                              }">
                Начать тестирование
            </button>
            @if (IsTestPerforming)
            {
                <MatThemeProvider Theme="theme">
                    <MatProgressCircle Class="ml-4" Indeterminate="true" Size="MatProgressCircleSize.Medium" />
                </MatThemeProvider>
            }
        </div>
        <div class="row justify-content-start">
            <div class="col-6 m-3">
                @foreach (var result in GetResultHtml())
                {
                    <div class="row">
                        <div class="col-12">
                            <div class="row">
                                <p class="mb-0" style="font-size: 20px; font-weight: bold">@result.TestName</p>
                            </div>
                            <div class="row ml-2">
                                <div class="col-12">
                                    @((MarkupString)result.ResultHtml)
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<MatThemeProvider Theme="@dialogTheme">
    <MatDialog @bind-IsOpen="@IsTestFailed">
        <MatDialogTitle Class="text-center bg-danger">
            <div class="col-12">
                <i class="fas fa-times" style="font-size: 65px; color: white"></i>
                <p style="color: white">Ошибка</p>
            </div>
        </MatDialogTitle>
        <MatDialogContent>
            <p class="mt-2">
                Не удалось выполнить тесты ввиду неизвестной ошибки. Попробуйте повторить попытку позже
                либо свяжитесь с технической поддержкой
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Unelevated="true" Type="button" OnClick="@(e => { IsTestFailed = false; })">Закрыть</MatButton>
        </MatDialogActions>
    </MatDialog>
</MatThemeProvider>

@code {

    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public int UserId { get; set; }

    class FileToEdit
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Text { get; set; }
        public bool IsOpened { get; set; }
        public bool IsChanged { get; set; }
    }

    TestInfo TestInfo { get; set; }

    MatFileUpload InputFile { get; set; }

    CodeMirror CodeEditor { get; set; }

    FileToEdit fileToEdit { get; set; }

    bool IsTestPerforming { get; set; }

    bool IsTestFailed { get; set; }

    class FileToUpload
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public long Size { get; set; }

        public Stream Stream { get; set; }
    }

    MatTheme theme = new MatTheme
    {
        Primary = "#007bff", // Цвет кнопки
        Surface = "white" // Цвет фона диалогового окна
    };

    MatTheme dialogTheme = new MatTheme
    {
        Primary = "#FF8740", // Цвет кнопки
        Surface = "white" // Цвет фона диалогового окна
    };

    (List<FileToUpload> FilesToUpload, List<(FileToUpload File, IMatFileUploadEntry FileEntry)> FilesToPrepare) Files { get; set; }

    protected override void OnInitialized()
    {
        Task.WaitAll(InitializeCodeFiles());

        fileToEdit = new();
        fileToEdit.IsOpened = false;

        TestInfo = TestService.GetTestInfo(UserId, PostId).GetAwaiter().GetResult();

        IsTestPerforming = false;
        IsTestFailed = false;
    }

    // Инициализация файлов с кодом студента
    async Task InitializeCodeFiles()
    {
        var files = await TestService.GetCodeFiles(PostId, UserId);
        Files = (new List<FileToUpload>(), new List<(FileToUpload, IMatFileUploadEntry)>());

        if (files is not null && files.Count > 0)
        {
            Files.FilesToUpload.AddRange(files
                .Select(file =>
                {
                    return new FileToUpload { Stream = file.Stream, Name = file.Name, Size = file.Size };
                }));
        }
    }

    // Добавлены новые файлы
    async Task FilesReady(IMatFileUploadEntry[] files)
    {
        var filesToUpload = Files.FilesToUpload;
        var filesToPrepare = Files.FilesToPrepare;

        // Добавление файлов
        foreach (var file in files)
        {
            if (filesToUpload.FirstOrDefault(item => item.Name == file.Name) is not null ||
                filesToPrepare.FirstOrDefault(item => item.File.Name == file.Name) is not (null, null)) continue;

            var fileToUpload = new FileToUpload()
            {
                Id = ((MatFileUploadEntry)file).Id + 1,
                Name = file.Name,
                Size = file.Size,
                Stream = new MemoryStream()
            };

            filesToPrepare.Add((fileToUpload, file));
        }

        StateHasChanged();

        // Загрузка файлов в MemoryStream
        foreach (var file in filesToPrepare)
        {
            await file.FileEntry.WriteToStreamAsync(file.File.Stream);
            filesToUpload.Add(file.File);

            StateHasChanged();
        }
        // Удаление
        filesToPrepare.RemoveAll(file => file.File.Id >= 0);
        StateHasChanged();

        // Очистка полей ввода для файлов
        await JsRuntime.InvokeVoidAsync("clearInputFile");
    }

    void DeleteFile(FileToUpload fileToDelete)
    {
        var filesToUpload = Files.FilesToUpload;

        filesToUpload.Remove(filesToUpload.First(file => file.Equals(fileToDelete)));
    }

    // Открыть файл для редактирования
    async Task OpenFile(FileToUpload fileToOpen)
    {
        await CodeEditor.GetEditor();

        fileToOpen.Stream.Position = 0;
        var sr = new StreamReader((MemoryStream)fileToOpen.Stream);

        var fileCode = new StringBuilder();
        var line = string.Empty;

        while ((line = sr.ReadLine()) != null)
        {
            fileCode.AppendLine(line);
        }

        fileToEdit.Text = fileCode.ToString();
        fileToEdit.Name = fileToOpen.Name;
        fileToEdit.Id = fileToOpen.Id;
        fileToEdit.IsOpened = true;
        fileToEdit.IsChanged = false;

        var language = CodeLanguage.GetLanguageByExtension(Path.GetExtension(fileToEdit.Name));

        await CodeEditor.SetCode(fileToEdit.Text, language);
        CodeEditor.OnValueChanged += EditorValueChanged;
    }

    // Сохранить редактируемый файл
    async Task SaveFile()
    {
        fileToEdit.Text = await CodeEditor.GetCode();
        fileToEdit.IsChanged = false;

        // Передать в редактор кода язык сохраненного файла
        var language = CodeLanguage.GetLanguageByExtension(Path.GetExtension(fileToEdit.Name));
        await CodeEditor.SetLanguage(language);

        using (var memoryStream = new MemoryStream(fileToEdit.Text.Length))
        using (var streamWriter = new StreamWriter(memoryStream))
        {
            await streamWriter.WriteAsync(fileToEdit.Text);

            await streamWriter.FlushAsync();

            var file = Files.FilesToUpload.FirstOrDefault(file => file.Name == fileToEdit.Name) ?? new FileToUpload()
            {
                Id = (Files.FilesToUpload.Count > 0 ? Files.FilesToUpload.Max(file => file.Id) : 0) + 1,
                Name = fileToEdit.Name
            };

            file.Stream = new MemoryStream(fileToEdit.Text.Length);

            memoryStream.Position = 0;
            await memoryStream.CopyToAsync(file.Stream);

            file.Size = file.Stream.Length;

            if (!Files.FilesToUpload.Any(f => (f.Id, f.Name) == (file.Id, file.Name)))
            {
                Files.FilesToUpload.Add(file);
            }
            else
            {
                var index = Files.FilesToUpload.IndexOf(Files.FilesToUpload.First(f => f.Id == file.Id));
                Files.FilesToUpload[index] = file;
            }
        }
    }

    // Создать новый файл для редактирования
    async Task CreateNewFile()
    {
        fileToEdit.Name = "Новый файл";
        fileToEdit.Text = string.Empty;
        fileToEdit.IsOpened = true;
        fileToEdit.IsChanged = false;

        await CodeEditor.GetEditor();
        await CodeEditor.SetCode(fileToEdit.Text);

        CodeEditor.OnValueChanged += EditorValueChanged;
    }

    async Task Test()
    {
        var fileModels = new List<FileModel>();

        // Загрузка файлов с кодом студентов на сервер
        foreach (var file in Files.FilesToUpload)
        {
            await TestService.UploadCodeFiles(PostId, UserId, Files.FilesToUpload.Select(file => (file.Name, file.Stream)).ToList());
        }

        var language = CodeLanguage.GetLanguageByExtension(Path.GetExtension(Files.FilesToUpload[0].Name));
        // Тестирование
        var testInfo = await TestService.CreateTest(UserId, PostId, language);

        try
        {
            TestInfo = await TestService.TestCode(testInfo);
        }
        catch (Exception)
        {
            IsTestFailed = true;
        }
    }

    bool IsFormValid()
    {
        // Принадлежит ли код в файлах к одному языку
        var isOnlyLanguage = Files.FilesToUpload
            .GroupBy(file => CodeLanguage.GetLanguageByExtension(Path.GetExtension(file.Name)))
            .Count() == 1;

        return isOnlyLanguage;
    }

    List<(string TestName, string ResultHtml)> GetResultHtml()
    {
        if (TestInfo is null || TestInfo.ResultText is null) return new();

        var html = TestService.BuildTestResults(TestInfo);

        return html;
    }

    void EditorValueChanged(string value)
    {
        if (fileToEdit.IsChanged == value.Equals(fileToEdit.Text.Replace("\r\n", "\n")))
        {
            fileToEdit.IsChanged = !fileToEdit.IsChanged;
            StateHasChanged();
        }
    }

    string FileSizeToText(float size)
    {
        size = size / 1000;
        return $"{size.ToString("0.00")} Кб";
    }
}
