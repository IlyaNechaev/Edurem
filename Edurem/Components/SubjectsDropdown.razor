@using Edurem.Models;
@using Edurem.ViewModels;
@inject Edurem.Services.IGroupService GroupService;
@inject IJSRuntime JSRuntime;

<div class="row mt-3">
    <div class="col-12">
        <span class="h5">Дисциплина</span>
    </div>
</div>
<div class="row align-items-center">
    <div class="col-5">
        <select @onchange="SelectedSubjectChanged" class="form-control">
            @foreach (var subject in AvailableSubjects)
            {
                @if (subject.Id == SubjectId)
                {
                    <option value="@subject.Id" selected>@subject.Name</option>
                }
                else
                {
                    <option value="@subject.Id">@subject.Name</option>
                }
            }
        </select>
    </div>
    <div class="col-1 text-center">
        <a href="" @onclick="() => { IsAddSubjectOpened = true; }" @onclick:preventDefault>
            <i class="fas fa-plus" style="color: green; font-size: 25px"></i>
        </a>
    </div>
</div>


<MatDialog @bind-IsOpen="@IsAddSubjectOpened" Class="col-12">
    <MatDialogTitle>
        <div class="col-12 text-left">
            <p style="font-size: 22px">Добавить дисциплину</p>
        </div>
    </MatDialogTitle>
    <MatDialogContent>
        <input class="form-control" placeholder="Название дисциплины" @bind-value="SubjectName" />
    </MatDialogContent>
    <MatDialogActions>
        <button class="btn btn-primary mr-2" type="button" @onclick="(e => { AddSubject(); IsAddSubjectOpened = false; SubjectName = string.Empty; })">Добавить</button>
        <button class="btn btn-danger" type="button" @onclick="(e => { IsAddSubjectOpened = false; })">Закрыть</button>
    </MatDialogActions>
</MatDialog>

@code {

    // Id авторизованного пользователя
    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int SubjectId { get; set; }

    List<Subject> AvailableSubjects { get; set; }

    bool IsAddSubjectOpened { get; set; }

    string SubjectName { get; set; }

    protected override void OnInitialized()
    {
        Task.WaitAll(FillAvailableSubjects());
    }

    async Task FillAvailableSubjects()
    {
        AvailableSubjects = new();
        AvailableSubjects.Add(new Subject() { Name = "-", Id = 0 });

        // Добавляем все имеющиеся дисциплины
        (await GroupService.GetUserSubjects(UserId))
            .ForEach(AvailableSubjects.Add);
    }

    void AddSubject()
    {
        Task.WaitAll(
            Task.Run(async () =>
            {
                await GroupService.AddSubject(SubjectName, UserId);
                await FillAvailableSubjects();
            })
        );
    }

    public Task SelectedSubjectChanged(ChangeEventArgs e)
    {
        var s = e.Value.ToString();
        SubjectId = int.Parse(s);

        return UpdateSubject();
    }

    public async Task UpdateSubject()
    {
        await JSRuntime.InvokeVoidAsync("updateSubject", SubjectId);
    }

}
