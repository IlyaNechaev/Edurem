@inject Edurem.Services.IMarkdownService MarkdownService;
@inject Edurem.Services.IFileService FileService;
@inject Edurem.Services.IGroupService GroupService;
@inject Edurem.Services.IPostService PostService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IHttpClientFactory HttpFactory;
@using System.IO;
@using Edurem.ViewModels;
@using Blazored.TextEditor;

<form action="">
    <div class="row">
        <div class="col-12">
            <div class="row mt-2">
                <div class="col-6">
                    <input class="form-control @(IsTitleValid ? "" : "border-danger")" @oninput="e => { PostTitle = e.Value.ToString(); IsTitleValid = true; }"
                           style="font-size: 18px" placeholder="Название поста" />
                    @if (!IsTitleValid)
                    {
                        <span class="text-danger">Введите название публикации</span>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <MatThemeProvider Theme="theme">
                        <MatTabGroup ActiveIndexChanged="TextEditorChanged">
                            @foreach (var editor in Editors)
                            {
                                <MatTab Label="@editor.Name">
                                </MatTab>
                            }
                        </MatTabGroup>
                    </MatThemeProvider>
                </div>
                <div class="col-3">
                </div>
                <div class="col-3">
                    <a href="#" @onclick="e => IsTestOpened = true" @onclick:preventDefault><p style="font-size: 18px"><i style="color: green" class="fas fa-plus"></i> Тестирование</p></a>
                </div>
            </div>

            <div class="row mt-2" style="@(CurrentEditor.Equals(TextEditors.Markdown) ? "" : "display:none")">
                <div class="col-12">
                    <div class="row mt-2  mb-2">
                        <div class="col-3">
                            <select class="form-control" @onchange="e => Position = (MdPosition)Enum.Parse(typeof(MdPosition), e.Value.ToString())">
                                <option value="@MdPosition.COL" selected>В столбец</option>
                                <option value="@MdPosition.ROW">В строку</option>
                            </select>
                        </div>
                    </div>
                    @if (Position.Equals(MdPosition.COL))
                    {
                        <div class="row">
                            <div class="col-10">
                                <MatThemeProvider Theme="theme">
                                    <MatInputTextComponent Value="@(MarkdownText)" @oninput="MarkdownTextChanged" Outlined="true" Class="w-100" TextArea="true" Style="resize: none; height: 30vh">
                                    </MatInputTextComponent>
                                </MatThemeProvider>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-10 border">
                                @((MarkupString)MarkdownService.ToHtml(MarkdownText))
                                <!--<StardustDL.RazorComponents.Markdown.MarkdownRenderer Value="@MarkdownText" />-->
                            </div>
                        </div>
                    }
                    else if (Position.Equals(MdPosition.ROW))
                    {
                        <div class="row">
                            <div class="col-6">
                                <MatThemeProvider Theme="theme">
                                    <MatInputTextComponent Value="@MarkdownText" @oninput="MarkdownTextChanged" Outlined="true" Class="w-100" TextArea="true" Style="resize: none; height: 50vh">
                                    </MatInputTextComponent>
                                </MatThemeProvider>
                            </div>
                            <div class="col-6">
                                @((MarkupString)MarkdownService.ToHtml(MarkdownText))
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="row mt-2 mb-5" style="@(CurrentEditor.Equals(TextEditors.RichText) ? "" : "display:none")">
                <div class="col-10">
                    <BlazoredTextEditor @ref="@Editor">
                        <ToolbarContent>
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-header">
                                    <option selected="">Paragraph</option>
                                    <option value="5">Header 5</option>
                                    <option value="4">Header 4</option>
                                    <option value="3">Header 3</option>
                                    <option value="2">Header 2</option>
                                    <option value="1">Header 1</option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
            </div>
            <div class="row mt-3 mb-2 justify-content-center">
                <div class="col-8 col-xl-6">
                    <MatThemeProvider Theme="theme">
                        <MatFileUpload Style="18px" Label="Выберите файлы или перетащите их сюда" Class="border" OnChange="files => FilesReadyForUpload(files, UploadFileType.POST)" AllowMultiple="true">
                        </MatFileUpload>
                    </MatThemeProvider>
                </div>
            </div>
            <div class="row mb-3">
                @foreach (var file in Files[UploadFileType.POST].FilesToUpload)
                {
                    <div class="col-2">
                        <div class="card">
                            <div class="card-body" style="padding-top: 5px">
                                <div class="row justify-content-end">
                                    <p style="font-size: 13px" class="mb-0">
                                        <a href="" @onclick="e => DeleteFile(file, UploadFileType.POST)" @onclick:preventDefault="true">X</a>
                                    </p>
                                </div>
                                <div class="row justify-content-center">
                                    <i style="font-size:35px" class="@FileService.GetExtensionClass(file.File.Name.Split(".").Last())"></i>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-center">
                            <div class="row justify-content-center">
                                <p style="font-size: 14px" class="mb-0">
                                    <b>@file.File.Name</b>
                                </p>
                            </div>
                            <div class="row justify-content-center">
                                <p style="font-size: 11px" class="mb-0">
                                    @FileSizeToText(file.File.Size)
                                </p>
                            </div>
                        </div>
                    </div>
                }
                @foreach (var file in Files[UploadFileType.POST].FilesToPrepare)
                {
                    @if (file.IsUploaded) continue;
                    <div class="col-2">
                        <div class="card">
                            <div class="card-body">
                                <div class="row justify-content-center">
                                    <div class="col-6">
                                        <MatThemeProvider Theme="theme">
                                            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
                                        </MatThemeProvider>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-center">
                            <div class="row justify-content-center">
                                <p style="font-size: 14px" class="mb-0">
                                    <b>@file.File.Name</b>
                                </p>
                            </div>
                            <div class="row justify-content-center">
                                <p style="font-size: 11px" class="mb-0">
                                    @FileSizeToText(file.File.Size)
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col-3">
                    <button class="btn btn-primary" type="button" style="font-size: 18px" @onclick="async e => { if (IsFormValid()) await Confirm(); }">Опубликовать</button>
                </div>
            </div>
        </div>
    </div>
</form>

<!--Диалоговое окно ошибки-->
<MatThemeProvider Theme="@dialogTheme">
    <MatDialog @bind-IsOpen="@NotifyError">
        <MatDialogTitle Class="text-center bg-danger">
            <div class="col-12">
                <i class="fas fa-times" style="font-size: 65px; color: white"></i>
                <p style="color: white">Ошибка</p>
            </div>
        </MatDialogTitle>
        <MatDialogContent>
            <p class="mt-2 text-center">
                @ErrorMessage
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Unelevated="true" Type="button" OnClick="@(e => { NotifyError = false; })">Закрыть</MatButton>
        </MatDialogActions>
    </MatDialog>
</MatThemeProvider>

<!--Диалоговое окно редактирования тестов-->
<MatThemeProvider Theme="theme">
    <MatDialog @bind-IsOpen="@IsTestOpened">
        <MatDialogTitle>
            <div class="row">
                <div class="col-6">
                    <p style="font-size: 20px" class="bold">Тестирование</p>
                </div>
                <div class="col-6">
                    <p style="font-size: 18px" class="bold @(TestLanguage.IsLanguageDetected ? "" : "text-danger")">
                        @TestLanguage.CodeLanguage.LanguageTitle
                    </p>
                </div>
            </div>
        </MatDialogTitle>
        <MatDialogContent>
            <div class="row">
                <ul class="col-12">
                    @foreach (var testFile in Files[UploadFileType.TEST].FilesToUpload)
                    {
                        <li class="row">
                            <div class="col-6">
                                <p>@testFile.File.Name</p>
                            </div>
                            <div class="col-3">
                                <p>@FileSizeToText(testFile.File.Size)</p>
                            </div>
                            <div class="col-3">
                                <a href="" @onclick:preventDefault="true"
                                   @onclick="e =>
                                         {
                                             DeleteFile(testFile, UploadFileType.TEST);
                                             TestLanguage.SetLanguage(Files[UploadFileType.TEST].FilesToUpload.Select(test => test.File.Name.Split('.').Last()).ToArray());
                                         }">
                                    <b class="text-danger">X</b>
                                </a>
                            </div>
                        </li>
                    }
                    @foreach (var testFile in Files[UploadFileType.TEST].FilesToPrepare)
                    {
                        <li class="row">
                            <div class="col-6">
                                <p>@testFile.File.Name</p>
                            </div>
                            <div class="col-3">
                                <p>@FileSizeToText(testFile.File.Size)</p>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <div class="row">
                <MatThemeProvider Theme="theme">
                    <MatFileUpload Style="18px" Label="Выберите файлы или перетащите их сюда" Class="border"
                                   AllowMultiple="true"
                                   OnChange="async files =>
                                         {
                                             await FilesReadyForUpload(files, UploadFileType.TEST);
                                             TestLanguage.SetLanguage(Files[UploadFileType.TEST].FilesToUpload.Select(test => test.File.Name.Split('.').Last()).ToArray());
                                         }">
                    </MatFileUpload>
                </MatThemeProvider>
            </div>
        </MatDialogContent>

        <MatDialogActions>
            <MatButton Unelevated="true" Type="button" OnClick="@(e => { IsTestOpened = false; })">Готово</MatButton>
        </MatDialogActions>
    </MatDialog>
</MatThemeProvider>

@code {

    [Parameter]
    public CurrentUserViewModel CurrentUser { get; set; }

    [Parameter]
    public Group Group { get; set; }

    MatTheme theme = new MatTheme
    {
        Primary = "#007bff", // Цвет кнопки
        Surface = "white" // Цвет фона диалогового окна
    };

    MatTheme dialogTheme = new MatTheme
    {
        Primary = "#FF8740", // Цвет кнопки
        Surface = "white" // Цвет фона диалогового окна
    };

    string PostTitle { get; set; }

    #region CUSTOM_TYPES

    enum TextEditors { Markdown, RichText };

    enum MdPosition { COVERED, ROW, COL };

    enum UploadFileType { POST, TEST };

    class FileToUpload
    {
        public IMatFileUploadEntry File { get; set; }

        public Stream Stream { get; set; }

        public bool IsUploaded { get; set; }
    }

    static class TestLanguage
    {
        static TestLanguage()
        {
            CodeLanguage = new CodeLanguage() { LanguageTitle = string.Empty };
        }

        public static CodeLanguage CodeLanguage { get; set; }

        public static bool IsLanguageDetected { get; set; }

        public static string SetLanguage(params string[] fileExtensions)
        {
            var languages = fileExtensions.Select(extension => GetLanguage(extension)).Distinct();

            // Если представлены файлы с одинаковым расширением
            if (languages.Count() == 1)
            {
                // Если расширение не принадлежит поддерживаемым языкам
                if (languages.First().Equals(Models.Language.DEFAULT))
                {
                    CodeLanguage = new CodeLanguage
                    {
                        Language = Models.Language.DEFAULT,
                        LanguageTitle = "Язык не определен"
                    };
                    IsLanguageDetected = false;
                }
                // Если расширение принадлежит поддерживаемому языку
                else
                {
                    CodeLanguage = new CodeLanguage();
                    CodeLanguage.SetLanguage(languages.First());
                    IsLanguageDetected = true;
                }
            }
            // Если представлены файлы с разными расширениями
            else if (languages.Count() > 1)
            {
                CodeLanguage = new CodeLanguage
                {
                    Language = Models.Language.DEFAULT,
                    LanguageTitle = "Язык не определен"
                };
                IsLanguageDetected = false;
            }
            // Если файлов нет
            else
            {
                CodeLanguage = new CodeLanguage
                {
                    Language = Models.Language.DEFAULT,
                    LanguageTitle = ""
                };
                IsLanguageDetected = false;
            }

            return CodeLanguage.LanguageTitle;
        }

        private static Language GetLanguage(string fileExtension) => fileExtension switch
        {
            "cs" => Models.Language.CSHARP,
            "py" or "pyw" or "pyd" => Models.Language.PYTHON,
            _ => Models.Language.DEFAULT
        };
    }

    #endregion

    #region PROPERTIES

    MdPosition Position { get; set; }

    TextEditors CurrentEditor { get; set; }

    List<(TextEditors Type, string Name)> Editors { get; set; }

    BlazoredTextEditor Editor { get; set; }

    string MarkdownText { get; set; }

    Dictionary<UploadFileType, (List<FileToUpload> FilesToUpload, List<FileToUpload> FilesToPrepare)> Files { get; set; }

    bool NotifyError { get; set; }

    string ErrorMessage { get; set; }

    bool IsTitleValid { get; set; }

    bool IsTestOpened { get; set; }

    #endregion

    protected override void OnInitialized()
    {
        MarkdownText = string.Empty;
        PostTitle = string.Empty;
        NotifyError = false;
        IsTestOpened = false;
        IsTitleValid = true;

        Files = new();
        foreach (var fileType in Enum.GetValues(typeof(UploadFileType)))
        {
            var files = (new List<FileToUpload>(), new List<FileToUpload>());
            Files.Add((UploadFileType)fileType, files);
        }

        Position = MdPosition.COL;

        Editors = new()
        {
            (TextEditors.Markdown, "Markdown"),
            (TextEditors.RichText, "Rich Text")
        };

        CurrentEditor = Editors[0].Type;
    }

    void MarkdownTextChanged(ChangeEventArgs e)
    {
        MarkdownText = e.Value.ToString();
    }

    // Добавлены новые файлы
    async Task FilesReadyForUpload(IMatFileUploadEntry[] files, UploadFileType filesType)
    {
        var filesToUpload = Files[filesType].FilesToUpload;
        var filesToPrepare = Files[filesType].FilesToPrepare;

        // Добавление файлов
        foreach (var file in files)
        {
            if (filesToUpload.FirstOrDefault(item => item.File.Name == file.Name) is not null ||
                filesToPrepare.FirstOrDefault(item => item.File.Name == file.Name) is not null) continue;

            var fileToUpload = new FileToUpload()
            {
                File = file,
                Stream = null,
                IsUploaded = false
            };

            filesToPrepare.Add(fileToUpload);
        }

        StateHasChanged();

        // Загрузка файлов в MemoryStream
        foreach (var file in filesToPrepare)
        {
            file.Stream = new MemoryStream();
            await file.File.WriteToStreamAsync(file.Stream);
            file.IsUploaded = true;
            filesToUpload.Add(file);

            StateHasChanged();
        }
        // Удаление
        filesToPrepare.RemoveAll(file => file.IsUploaded == true);


        // Очистка полей ввода для файлов
        await JsRuntime.InvokeVoidAsync("clearInputFile");
    }

    void DeleteFile(FileToUpload fileToDelete, UploadFileType filesType)
    {
        var filesToUpload = Files[filesType].FilesToUpload;

        filesToUpload.Remove(fileToDelete);
    }

    bool IsFormValid()
    {
        IsTitleValid = (PostTitle != string.Empty);

        return IsTitleValid && (TestLanguage.IsLanguageDetected || Files[UploadFileType.TEST].FilesToUpload.Count() == 0);
    }

    async Task Confirm()
    {
        if (!CurrentEditor.Equals(TextEditors.Markdown))
            await TextEditorChanged((int)TextEditors.Markdown);

        var html = MarkdownService.ToHtml(MarkdownText);

        var postModel = new PostModel()
        {
            AuthorId = CurrentUser.Id,
            PublicationDate = DateTime.Now,
            PostBody = html,
            Title = PostTitle,
            Language = Language.DEFAULT
        };

        try
        {
            // Создание публикации
            await GroupService.CreatePost(postModel, Group.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            ErrorNotification("Произошла непредвиденная ошибка. Попробуйте повторить операцию через несколько минут либо обратитесь в техническую поддержку");
        }

        // Модели файлов для связи с БД
        var postFileModels = new List<FileModel>();
        var testFileModels = new List<FileModel>();

        foreach (var file in Files[UploadFileType.POST].FilesToUpload)
        {
            var filePath = Path.Combine("file_system\\users", CurrentUser.Id.ToString());

            try
            {
                // Загрузка файлов на сервер
                postFileModels.Add(await FileService.UploadFile(file.Stream, filePath, $"{file.File.Name}"));
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        // Добавление файлов к публикации
        await PostService.AddFilesToPost(postModel.Id, postFileModels);

        // Если добавлены тесты
        if (Files[UploadFileType.TEST].FilesToUpload is not null && Files[UploadFileType.TEST].FilesToUpload.Count > 0)
        {
            foreach (var file in Files[UploadFileType.TEST].FilesToUpload)
            {
                var filePath = Path.Combine("file_system\\tests", $"post_{postModel.Id}");

                try
                {
                    // Загрузка тестов на сервер
                    testFileModels.Add(await FileService.UploadFile(file.Stream, filePath, $"{file.File.Name}"));
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            // Добавление тестов к публикации
            await PostService.AddTestsToPost(postModel.Id, testFileModels, TestLanguage.CodeLanguage.Language);
        }


        NavigationManager.NavigateTo($"group/{Group.Id}", true);
    }

    async Task TextEditorChanged(int activeIndex)
    {
        // Тип выбранного редактора
        CurrentEditor = activeIndex == 0 ? TextEditors.Markdown : TextEditors.RichText;

        if (CurrentEditor.Equals(TextEditors.Markdown))
        {
            var html = await Editor.GetHTML();
            MarkdownText = MarkdownService.ToMarkdown(html);
        }
        else if (CurrentEditor.Equals(TextEditors.RichText))
        {
            var html = MarkdownService.ToHtml(MarkdownText);

            // Ожидаем, пока не будет создан Editor
            await Task.WhenAll(Task.Run(() => { while (Editor is null) ; }));

            try
            {
                // При первом вызове вызывается исключение, поэтому оборачиваем в
                // try catch и вызываем еще раз
                await Editor.LoadHTMLContent(html);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                await Editor.LoadHTMLContent(html);
            }
        }

    }

    string FileSizeToText(float size)
    {
        size = size / 1000;
        return $"{size.ToString("0.00")} Кб";
    }

    void ErrorNotification(string errorMessage = "")
    {
        ErrorMessage = errorMessage;
        NotifyError = true;
    }
}
