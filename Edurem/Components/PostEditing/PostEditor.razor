@namespace Edurem.Components
@inject Edurem.Services.IMarkdownService MarkdownService;
@inject Edurem.Services.IFileService FileService;
@inject Edurem.Services.IGroupService GroupService;
@inject Edurem.Services.IPostService PostService;
@inject Edurem.Services.ICodeTestService TestService;
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory HttpFactory;
@using Edurem.Models;
@using System.IO;


<div class="container">
    <div class="row bs-wizard" style="border-bottom:0;">

        <div class="col-4 bs-wizard-step @(Page < 1 ? "disabled" : (Page == 1 ? "active" : "complete"))">
            <div class="text-center bs-wizard-stepnum" style="font-weight: bold">Описание</div>
            <div class="progress">
                <div class="progress-bar"></div>
            </div>
            <a href="#" class="bs-wizard-dot"></a>
            <!--<div class="bs-wizard-info text-center">Lorem ipsum dolor sit amet.</div>-->
        </div>

        <div class="col-4 bs-wizard-step @(Page < 2 ? "disabled" : (Page == 2 ? "active" : "complete"))">
            <div class="text-center bs-wizard-stepnum" style="font-weight: bold">Тесты</div>
            <div class="progress">
                <div class="progress-bar"></div>
            </div>
            <a href="#" class="bs-wizard-dot"></a>
            <!--<div class="bs-wizard-info text-center">Nam mollis tristique erat vel tristique. Aliquam erat volutpat. Mauris et vestibulum nisi. Duis molestie nisl sed scelerisque vestibulum. Nam placerat tristique placerat</div>-->
        </div>

        <div class="col-4 bs-wizard-step @(Page < 3 ? "disabled" : (Page == 3 ? "active" : "complete"))">
            <div class="text-center bs-wizard-stepnum" style="font-weight: bold">Подтверждение</div>
            <div class="progress">
                <div class="progress-bar"></div>
            </div>
            <a href="#" class="bs-wizard-dot"></a>
            <!--<div class="bs-wizard-info text-center">Integer semper dolor ac auctor rutrum. Duis porta ipsum vitae mi bibendum bibendum</div>-->
        </div>
    </div>
</div>

@switch (Page)
{
    case 1:
        <div class="row mb-3">
            <div class="col-12">
                <EditPost @ref="EditPost" UserId="UserId" GroupId="GroupId" Post="Post" ChosenGroupsId="GroupIds" PostFiles="PostFiles" ChooseGroups="false"></EditPost>
            </div>
        </div>
        break;
    case 2:
        <div class="row mb-3">
            <div class="col-12">
                <EditPostTests @ref="EditPostTests" GroupIds="GroupIds" CommonTestFiles="CommonTestFiles" OptionTestFiles="OptionTestFiles"></EditPostTests>
            </div>
        </div>
        break;
}
<div class="row">
    <div class="col-3">
        @if (Page > 1)
        {
            <button class="btn btn-outline-dark w-100" style="font-size: 18px" @onclick="async e => await ChangePage(-1)">Назад</button>
        }
    </div>
    <div class="col-6">

    </div>
    <div class="col-3">
        @switch (Page)
        {
            case 1:
                <button class="btn btn-primary w-100" style="font-size: 18px"
                        @onclick="async e =>
                                      {
                                          if (EditPost.IsValid())
                                          {
                                              await ChangePage(1);
                                          }
                                      }">
                    Далее
                </button>
                break;
            case 2:
                <button class="btn btn-primary w-100" style="font-size: 18px"
                        @onclick="async e =>
                                      {
                                          await ChangePage(1);
                                      }">
                    Далее
                </button>
                break;
            case 3:
                <button class="btn btn-success w-100" style="font-size: 18px"
                        @onclick="e => Save()">
                    Сохранить
                </button>
                break;
        }
    </div>
</div>

<!--Диалоговое окно ошибки-->
<MatThemeProvider Theme="@dialogTheme">
    <MatDialog @bind-IsOpen="@NotifyError">
        <MatDialogTitle Class="text-center bg-danger">
            <div class="col-12">
                <i class="fas fa-times" style="font-size: 65px; color: white"></i>
                <p style="color: white">Ошибка</p>
            </div>
        </MatDialogTitle>
        <MatDialogContent>
            <p class="mt-2 text-center">
                @ErrorMessage
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Unelevated="true" Type="button" OnClick="@(e => { NotifyError = false; })">Закрыть</MatButton>
        </MatDialogActions>
    </MatDialog>
</MatThemeProvider>

<!--Диалоговое окно редактирования тестов-->
<!--
-->

@code {

    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public int GroupId { get; set; }

    public int UserId { get; set; }

    MatTheme theme = new MatTheme
    {
        Primary = "#007bff", // Цвет кнопки
        Surface = "white" // Цвет фона диалогового окна
    };

    MatTheme dialogTheme = new MatTheme
    {
        Primary = "#FF8740", // Цвет кнопки
        Surface = "white" // Цвет фона диалогового окна
    };

    #region CUSTOM_TYPES

    enum UploadFileType { POST, TEST };

    static class TestLanguage
    {
        static TestLanguage()
        {
            CodeLanguage = new CodeLanguage() { LanguageTitle = string.Empty };
        }

        public static CodeLanguage CodeLanguage { get; set; }

        public static bool IsLanguageDetected { get; set; }

        public static bool NeedToChooseLanguage { get; set; }

        public static string SetLanguage(params string[] fileExtensions)
        {
            var languages = fileExtensions
                .Select(extension => GetLanguage(extension))
                .Distinct(); // Файлы с JSON-расширениями не учитываются

            var onlyLanguages = languages.Where(language => !language.Equals(Language.JSON));

            // Если представлены файлы с одинаковым расширением (за исключением JSON-файлов)
            if (onlyLanguages.Count() == 1)
            {
                // Если расширение не принадлежит поддерживаемым языкам
                if (onlyLanguages.First().Equals(Models.Language.DEFAULT))
                {
                    CodeLanguage = new CodeLanguage
                    {
                        Language = Models.Language.DEFAULT,
                        LanguageTitle = "Язык не определен"
                    };
                    IsLanguageDetected = false;
                }
                // Если расширение принадлежит поддерживаемому языку
                else
                {
                    CodeLanguage = new CodeLanguage();
                    CodeLanguage.SetLanguage(onlyLanguages.First());
                    IsLanguageDetected = true;
                }
                NeedToChooseLanguage = false;
            }
            // Если представлены файлы с разными расширениями
            else if (onlyLanguages.Count() > 1)
            {
                CodeLanguage = new CodeLanguage
                {
                    Language = Models.Language.DEFAULT,
                    LanguageTitle = "Язык не определен"
                };
                IsLanguageDetected = false;
                NeedToChooseLanguage = false;
            }
            // Если представлены JSON-файлы
            else if (languages.Count() == 1)
            {
                NeedToChooseLanguage = true;
                IsLanguageDetected = false;
            }
            // Если файлов нет
            else
            {
                CodeLanguage = new CodeLanguage
                {
                    Language = Models.Language.DEFAULT,
                    LanguageTitle = ""
                };
                IsLanguageDetected = false;
                NeedToChooseLanguage = false;
            }

            return CodeLanguage.LanguageTitle;
        }

        public static void ForceSetLanguage(Language language)
        {
            CodeLanguage.SetLanguage(language);
            IsLanguageDetected = !language.Equals(Models.Language.DEFAULT) && !language.Equals(Models.Language.JSON);
        }

        private static Language GetLanguage(string fileExtension) => fileExtension switch
        {
            "cs" => Models.Language.CSHARP,
            "py" or "pyw" or "pyd" => Models.Language.PYTHON,
            "json" => Models.Language.JSON,
            _ => Models.Language.DEFAULT
        };
    }

    #endregion

    #region PROPERTIES

    EditPost EditPost { get; set; }

    EditPostTests EditPostTests { get; set; }

    PostModel Post { get; set; }

    List<FileUploader.FileToUpload> PostFiles { get; set; }

    List<FileUploader.FileToUpload> CommonTestFiles { get; set; }

    List<(FileUploader.FileToUpload File, int UserId)> OptionTestFiles { get; set; }

    List<int> GroupIds { get; set; }

    int Page { get; set; }

    bool NotifyError { get; set; }

    string ErrorMessage { get; set; }

    #endregion

    protected override void OnInitialized()
    {
        NotifyError = false;
        Page = 1;

        PostFiles = new();

        EditPost = new();
        EditPostTests = new();

        Task.WaitAll(DownloadFiles());

        Post = PostService.GetPost(PostId).Result;
        GroupIds = new (PostService.GetPostGroupsIds(PostId).Result);
    }

    async Task ChangePage(int pagesNumber)
    {
        switch (Page)
        {
            case 1:
                (Post, PostFiles, GroupIds) = await EditPost.GetPost();
                break;
            case 2:
                (CommonTestFiles, OptionTestFiles) = EditPostTests.GetTestFiles();
                break;
        }

        Page += pagesNumber;
    }

    async Task Save()
    {
        Post.HasTests = false;
        try
        {
            // Изменение публикации
            await PostService.ModifyPost(Post.Id, Post);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            ErrorNotification("Произошла непредвиденная ошибка. Попробуйте повторить операцию через несколько минут либо обратитесь в техническую поддержку");
            return;
        }

        GC.Collect();
        await PostService.DeletePostFiles(Post.Id);

        // Добавление файлов к публикации
        await PostService.AddFilesToPost(Post.Id, PostFiles.Select(file => (file.Stream, file.FileUploadEntry.Name)).ToList());

        // Если добавлены общие тесты
        if (CommonTestFiles is not null && CommonTestFiles.Count > 0)
        {
            // Добавление общих тестов к публикации
            await PostService.AddTestsToPost(Post.Id, CommonTestFiles.Select(test => (test.Stream, test.FileUploadEntry.Name)).ToList());
        }

        if (OptionTestFiles is not null && OptionTestFiles.Count > 0)
        {
            // Добавление тестов по вариантам к публикации
            await PostService.AddTestsToPost(Post.Id, OptionTestFiles.Select(test => (test.File.Stream, test.File.FileUploadEntry.Name, test.UserId)).ToList());
        }

        NavigationManager.NavigateTo($"group/{GroupId}", true);
    }

    string FileSizeToText(float size)
    {
        size = size / 1000;
        return $"{size.ToString("0.00")} Кб";
    }

    void ErrorNotification(string errorMessage = "")
    {
        ErrorMessage = errorMessage;
        NotifyError = true;
    }

    async Task DownloadFiles()
    {
        List<FileUploader.FileToUpload> postFiles = new();
        List<FileUploader.FileToUpload> commonTestFiles = new();
        List<(FileUploader.FileToUpload File, int UserId)> optionTestFiles = new();

        #region POST_FILES
        var postFilesPaths = PostService.GetPostFilesPaths(PostId);

        postFiles = postFilesPaths
            .Where(path => !string.IsNullOrEmpty(path))
            .Select((path, index) =>
            {
                var stream = FileService.GetFileStream(path);

                return new FileUploader.FileToUpload
                {
                    Stream = stream,
                    IsUploaded = true,
                    FileUploadEntry = new MatFileUploadEntry
                    {
                        Id = index + 1,
                        LastModified = File.GetLastWriteTime(path),
                        Size = stream.Length,
                        Name = Path.GetFileName(path)
                    }
                };
            })
            .ToList();

        #endregion

        var testFilesPaths = await PostService.GetPostTestFilesPaths(PostId);

        #region COMMON_TESTS

        var commonTestFilesPaths = testFilesPaths.CommonTestsPaths;

        commonTestFiles = commonTestFilesPaths
            .Where(path => !string.IsNullOrEmpty(path))
            .Select((path, index) =>
            {
                var stream = FileService.GetFileStream(path);
                return new FileUploader.FileToUpload
                {
                    Stream = stream,
                    IsUploaded = true,
                    FileUploadEntry = new MatFileUploadEntry
                    {
                        Id = index + 1,
                        LastModified = File.GetLastWriteTime(path),
                        Size = stream.Length,
                        Name = Path.GetFileName(path)
                    }
                };
            })
            .ToList();

        #endregion

        #region OPTION_TESTS
        var optionTestFilesPaths = testFilesPaths.OptionTestsPaths;

        foreach (var test in optionTestFilesPaths)
        {
            var filePathsArray = Enumerable.ToArray(test.FilePaths);
            for (int i = 0; i < filePathsArray.Length; i++)
            {
                var path = filePathsArray[i];
                if (string.IsNullOrEmpty(path)) continue;

                var stream = FileService.GetFileStream(path);
                var file = new FileUploader.FileToUpload
                {
                    Stream = stream,
                    IsUploaded = true,
                    FileUploadEntry = new MatFileUploadEntry
                    {
                        Id = i + 1,
                        LastModified = File.GetLastWriteTime(path),
                        Size = stream.Length,
                        Name = Path.GetFileName(path)
                    }
                };

                optionTestFiles.Add((file, test.UserId));
            }
        }
        #endregion

        PostFiles = postFiles;
        CommonTestFiles = commonTestFiles;
        OptionTestFiles = optionTestFiles;
    }

    ~PostEditor()
    {
        GC.Collect();
    }
}
